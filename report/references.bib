
@misc{BeagleBoardOrgPocket,
  title = {{{BeagleBoard}}.Org - Pocket},
  howpublished = {https://beagleboard.org/pocket}
}

@article{bozzatoShapingGlitchOptimizing2019,
  title = {Shaping the {{Glitch}}: {{Optimizing Voltage Fault Injection Attacks}}},
  shorttitle = {Shaping the {{Glitch}}},
  author = {Bozzato, Claudio and Focardi, Riccardo and Palmarini, Francesco},
  year = {2019},
  month = feb,
  journal = {IACR Transactions on Cryptographic Hardware and Embedded Systems},
  pages = {199--224},
  issn = {2569-2925},
  doi = {10.13154/tches.v2019.i2.199-224},
  abstract = {Voltage fault injection is a powerful active side channel attack that modifies the execution-flow of a device by creating disturbances on the power supply line. The attack typically aims at skipping security checks or generating side-channels that gradually leak sensitive data, including the firmware code. In this paper we propose a new voltage fault injection technique that generates fully arbitrary voltage glitch waveforms using off-the-shelf and low cost equipment. To show the effectiveness of our setup, we present new, unpublished firmware extraction attacks on six microcontrollers from three major manufacturers: STMicroelectronics, Texas Instruments and Renesas Electronics that, in 2016 declared a market of \$1.5 billion, \$800 million and \$2.5 billion on units sold, respectively. Among the presented attacks, the most challenging ones exploit multiple vulnerabilities and inject over one million glitches, heavily leveraging on the performance and repeatability of the new proposed technique. We perform a thorough evaluation of arbitrary glitch waveforms by comparing the attack performance against two other major V-FI techniques in the literature. Along a responsible disclosure policy, all the vulnerabilities have been timely reported to the manufacturers.},
  copyright = {Copyright (c) 2019 Claudio Bozzato, Riccardo Focardi, Francesco Palmarini},
  langid = {english},
  keywords = {Microcontrollers},
  file = {/home/jonty/Zotero/storage/G8WCW3TC/Bozzato et al. - 2019 - Shaping the Glitch Optimizing Voltage Fault Injec.pdf}
}

@misc{claessonVoltageGlitchingCheap2019,
  title = {Voltage Glitching on the Cheap},
  author = {Claesson, Christoffer},
  year = {2019},
  month = jun,
  journal = {Securitybits.io},
  abstract = {Stand back! We're doing science! voltage glitching on an Arduino},
  chapter = {Hardware},
  howpublished = {https://blog.securitybits.io/2019/06/voltage-glitching-on-the-cheap/},
  langid = {american},
  file = {/home/jonty/Zotero/storage/57PM7V43/voltage-glitching-on-the-cheap.html}
}

@misc{debug-siliconSiLabsC8051F34xCode2021,
  title = {{{SiLabs C8051F34x}} Code Protection Bypass},
  author = {{debug-silicon}},
  year = {2021},
  month = nov,
  abstract = {SiLabs C8051F34x code protection bypass},
  copyright = {MIT}
}

@misc{DigitalTechnologySolutions,
  title = {Digital and Technology Solutions Professional (Integrated Degree)},
  journal = {Institute for Apprenticeships and Technical Education},
  howpublished = {https://www.instituteforapprenticeships.org/apprenticeship-standards/digital-and-technology-solutions-professional-(integrated-degree)-v1-1},
  langid = {british},
  file = {/home/jonty/Zotero/storage/Z5WN2VP6/digital-and-technology-solutions-professional-(integrated-degree)-v1-1.html}
}

@book{francillonSmartCardResearch2014,
  title = {Smart {{Card Research}} and {{Advanced Applications}}: 12th {{International Conference}}, {{CARDIS}} 2013, {{Berlin}}, {{Germany}}, {{November}} 27-29, 2013. {{Revised Selected Papers}}},
  shorttitle = {Smart {{Card Research}} and {{Advanced Applications}}},
  editor = {Francillon, Aur{\'e}lien and Rohatgi, Pankaj},
  year = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {8419},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-08302-5},
  abstract = {Fault analysis poses a serious threat to embedded security devices, especially smart cards. In particular, modeling faults and finding effective practical approaches that are also generic is considered to be of interest for smart card industry. In this work we propose a novel methodology to deal with a difficult question of choosing multiple parameters required for effective faults. To this aim, we investigate several algorithms and find a new promising direction using evolutionary computation. Our experimental results on some of the smart cards used today show the potential of this new approach. Our best algorithm is a tailored search strategy especially developed for the purpose of finding the best choice of parameters for glitching. With this approach we found some of off-the-shelf devices, although secured against this type of attacks, still vulnerable.},
  isbn = {978-3-319-08301-8 978-3-319-08302-5},
  langid = {english},
  file = {/home/jonty/Zotero/storage/ME4PQN38/Francillon and Rohatgi - 2014 - Smart Card Research and Advanced Applications 12t.pdf}
}

@article{gaiAttackingEdgeofThingsPhysical2021,
  title = {Attacking the {{Edge-of-Things}}: {{A Physical Attack Perspective}}},
  shorttitle = {Attacking the {{Edge-of-Things}}},
  author = {Gai, Keke and Ding, Yaoling and Wang, An and Zhu, Liehuang and Choo, Kim-Kwang Raymond and Zhang, Qi and Wang, Zhuping},
  year = {2021},
  journal = {IEEE Internet of Things Journal},
  pages = {1--1},
  issn = {2327-4662},
  doi = {10.1109/JIOT.2021.3109917},
  abstract = {The concepts between Internet of Things (IoT) and edge computing are increasingly intertwined, as an edge computing architecture generally comprises a (large) number of diverse IoT devices. This, however, increases the potential attack vectors since any one of these connected IoT devices can be targeted to facilitate other malicious cyber activities. Physical attacks are generally harder to mitigate and less studied, in comparison to their cyber counterparts. Thus, in this paper we present an attack framework targeting true random number generators (TRNGs), which are a key component in cryptosystems for edge devices. We then demonstrate how such a framework can guide our investigation of a commercial ASIC chip that runs ring-oscillator-based TRNG. Specifically, we show that our template power attack, low voltage fault attack, and voltage glitch fault attack do not require prior knowledge of the TRNG implementation.},
  keywords = {Circuit faults,Cloud computing,edge computing,fault analysis,Generators,Hardware,Internet of Things,Low voltage,Physical attacks,power analysis.,Resists,true random number generators},
  file = {/home/jonty/Zotero/storage/HQQPDYTX/Gai et al. - 2021 - Attacking the Edge-of-Things A Physical Attack Pe.pdf;/home/jonty/Zotero/storage/98TNBZPY/9528853.html}
}

@misc{GlitchPinNot,
  title = {Glitch Pin Not Shorting to Ground {$\cdot$} {{Issue}} \#4 {$\cdot$} Stacksmashing/Airtag-Glitcher},
  journal = {GitHub},
  abstract = {Apologies if this is the wrong place. I\&\#39;ve put this here as there\&\#39;s no repo for the pico debug\&\#39;n\&\#39;dump hardware - I\&\#39;m using this code with the DnD to glitch an nRF52832. The glit...},
  howpublished = {https://github.com/stacksmashing/airtag-glitcher/issues/4},
  langid = {english},
  file = {/home/jonty/Zotero/storage/JHLEIEPM/4.html}
}

@article{goodspeed16BitRootkit,
  title = {A 16 {{Bit Rootkit}}, and {{Second Generation Zigbee Chips}}},
  author = {Goodspeed, Travis},
  pages = {71},
  langid = {english},
  file = {/home/jonty/Zotero/storage/AB7VJQDW/Goodspeed - A 16 Bit Rootkit, and Second Generation Zigbee Chi.pdf}
}

@article{goodspeedExtractingKeysSecond,
  title = {Extracting {{Keys}} from {{Second Generation Zigbee Chips}}},
  author = {Goodspeed, Travis},
  pages = {3},
  abstract = {First generation Zigbee chips were SPI slaves with no internal processing beyond cryptographic acceleration. Extracting a key was as simple as spying on the SPI transactions. The second generation chips, typified by the CC2430 from Texas Instruments and the EM250 from Ember, contain both a microcontroller and a radio, making the SPI sniffing attack all but irrelevant. Nevertheless, both chips are vulnerable to local key extraction. This paper describes techniques for doing so, focusing on the CC2430 as the EM250 has no protection against outside access. Recommendations are made for defending CC2430 firmware by using compiler directives to place sensitive information in flash memory, rather than in RAM. All Chipcon radios with 8051 cores released prior to the publication of this paper are expected to be vulnerable.},
  langid = {english},
  file = {/home/jonty/Zotero/storage/VGI6QDJM/Goodspeed - Extracting Keys from Second Generation Zigbee Chip.pdf}
}

@misc{grapsusCc254xSdcc,
  title = {Cc254x\_sdcc},
  author = {{Grapsus}},
  journal = {GitHub},
  abstract = {an attempt to write an open-source BlueTooth Low Energy stack for TI cc2540 and cc2541 RF MCUs - cc254x\_sdcc/util.c at master {$\cdot$} Grapsus/cc254x\_sdcc},
  howpublished = {https://github.com/Grapsus/cc254x\_sdcc},
  langid = {english},
  file = {/home/jonty/Zotero/storage/3ZB6Y9GP/cc254x_sdcc.html}
}

@article{kocherIntroductionDifferentialPower2011,
  title = {Introduction to Differential Power Analysis},
  author = {Kocher, Paul and Jaffe, Joshua and Jun, Benjamin and Rohatgi, Pankaj},
  year = {2011},
  month = apr,
  journal = {Journal of Cryptographic Engineering},
  volume = {1},
  number = {1},
  pages = {5--27},
  issn = {2190-8508, 2190-8516},
  doi = {10.1007/s13389-011-0006-y},
  abstract = {The power consumed by a circuit varies according to the activity of its individual transistors and other components. As a result, measurements of the power used by actual computers or microchips contain information about the operations being performed and the data being processed. Cryptographic designs have traditionally assumed that secrets are manipulated in environments that expose no information beyond the specified inputs and outputs. This paper examines how information leaked through power consumption and other side channels can be analyzed to extract secret keys from a wide range of devices. The attacks are practical, non-invasive, and highly effective\textemdash even against complex and noisy systems where cryptographic computations account for only a small fraction of the overall power consumption. We also introduce approaches for preventing DPA attacks and for building cryptosystems that remain secure even when implemented in hardware that leaks.},
  langid = {english},
  file = {/home/jonty/Zotero/storage/H97EPJ2E/Kocher et al. - 2011 - Introduction to differential power analysis.pdf}
}

@misc{limitedresultsNRF52DebugResurrection2020,
  title = {{{nRF52 Debug Resurrection}} ({{APPROTECT Bypass}}) {{Part}} 1},
  author = {{LimitedResults}},
  year = {2020},
  month = jun,
  journal = {LimitedResults},
  abstract = {Yes, resurrection of JTAG/SWD interface on protected platforms has always been a sensitive topic in embedded security. This security investigation},
  langid = {american},
  file = {/home/jonty/Zotero/storage/SQZYFLG4/nrf52-debug-resurrection-approtect-bypass.html}
}

@misc{limitedresultsPocketGlitcher2021,
  title = {The {{PocketGlitcher}}},
  author = {{LimitedResults}},
  year = {2021},
  month = mar,
  journal = {LimitedResults},
  abstract = {This blogpost presents a modding system, called PocketGlicher. It provides an automated way to perform voltage glitching, without any expensive electronic},
  langid = {american},
  file = {/home/jonty/Zotero/storage/UBKHV79I/the-pocketglitcher.html}
}

@misc{liveoverflowHardwarePowerGlitch2017,
  title = {Hardware {{Power Glitch Attack}} ({{Fault Injection}}) - Rhme2 {{Fiesta}} ({{FI}} 100)},
  author = {{LiveOverflow}},
  year = {2017},
  month = jun,
  abstract = {We perform a fault injection on an arduino board to break out of a endless loop. We drop the power for a very short amount of time so the microprocessor calculates something wrong. Skip to 0:56 if you don't want to see my cringy acting. The full verilog code: https://gist.github.com/LiveOverflow/... -=[ 🔴 Stuff I use ]=- \textrightarrow{} Microphone:* https://geni.us/ntg3b \textrightarrow{} Graphics tablet:* https://geni.us/wacom-intuos \textrightarrow{} Camera\#1 for streaming:* https://geni.us/sony-camera \textrightarrow{} Lens for streaming:* https://geni.us/sony-lense \textrightarrow{} Connect Camera\#1 to PC:* https://geni.us/cam-link \textrightarrow{} Keyboard:* https://geni.us/mech-keyboard \textrightarrow{} Old Microphone:* https://geni.us/mic-at2020usb US Store Front:* https://www.amazon.com/shop/liveoverflow -=[ \ding{164}️ Support ]=- \textrightarrow{} per Video: https://www.patreon.com/join/liveover... \textrightarrow{} per Month: https://www.youtube.com/channel/UClcE... -=[ 🐕 Social ]=- \textrightarrow{} Twitter: https://twitter.com/LiveOverflow/ \textrightarrow{} Website: https://liveoverflow.com/ \textrightarrow{} Subreddit: https://www.reddit.com/r/LiveOverflow/ \textrightarrow{} Facebook: https://www.facebook.com/LiveOverflow/ -=[ 📄 P.S. ]=- All links with "*" are affiliate links. LiveOverflow / Security Flag GmbH is part of the Amazon Affiliate Partner Programm. \#CTF \#HardwareSecurity}
}

@misc{melchingAirtagDumper2021,
  title = {Airtag Dumper},
  author = {Melching, Willem},
  year = {2021},
  month = oct,
  abstract = {Utility to glitch and dump an AirTag},
  copyright = {MIT}
}

@techreport{oflynnFaultInjectionUsing2016,
  title = {Fault {{Injection}} Using {{Crowbars}} on {{Embedded Systems}}},
  author = {O'Flynn, Colin},
  year = {2016},
  number = {810},
  abstract = {Causing a device to incorrectly execute an instruction or store faulty data is well-known strategy for attacking cryptographic implementations on embedded systems. One technique to generate such faults is to manipulate the supply voltage of the device. This paper introduces a novel technique to introduce those supply voltage manipulations onto existing digital systems, requiring minimal modifications to the device being attacked. This uses a crowbar to short the power supply for controlled periods of time. High-accuracy faults are demonstrated on the 8-bit AVR microcontroller, which can generate both single and multi-bit faults with high repeatability. Additionally this technique is demonstrated on a FPGA where it is capable of generating faults in both internal registers and the configuration fabric.},
  keywords = {fault injection,implementation,voltage faulting},
  file = {/home/jonty/Zotero/storage/BPQ7QYTM/O'Flynn - 2016 - Fault Injection using Crowbars on Embedded Systems.pdf;/home/jonty/Zotero/storage/85YBR2E9/810.html}
}

@misc{oswaldGiantrevBGIAnTFault,
  title = {Giant-{{revB}}: {{The GIAnT}} Fault Injection Board in the New Revision},
  shorttitle = {David-Oswald/Giant-{{revB}}},
  author = {Oswald, David},
  journal = {GitHub},
  abstract = {The GIAnT fault injection board in the new revision - david-oswald/giant-revB: The GIAnT fault injection board in the new revision},
  howpublished = {https://github.com/david-oswald/giant-revB},
  langid = {english},
  file = {/home/jonty/Zotero/storage/4C9BMYQS/giant-revB.html}
}

@misc{riesterDS1074ZInterfaceClass,
  title = {{{DS1074Z Interface Class}}},
  author = {Riester, Sven},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/blob/master/general/record\_and\_dpa/DS1074Z.py},
  langid = {english},
  file = {/home/jonty/Zotero/storage/GIXLIXBI/DS1074Z.html}
}

@misc{riesterDS1074ZUndPyVisa,
  title = {{{DS1074Z}} Und {{PyVisa}}},
  author = {Riester, Sven},
  journal = {RockingWombat},
  howpublished = {http://www.rocking-wombat.de/PythonPyVisa.html},
  file = {/home/jonty/Zotero/storage/PQQUTS3F/PythonPyVisa.html}
}

@misc{rothAirtagglitcher2021,
  title = {Airtag-Glitcher},
  author = {Roth, Thomas},
  year = {2021},
  month = sep,
  howpublished = {stacksmashing}
}

@misc{rothHowAppleAirTags2021,
  title = {How the {{Apple AirTags}} Were Hacked},
  author = {Roth, Thomas},
  year = {2021},
  month = may,
  abstract = {On Saturday, I managed to dump the firmware of the newly released Apple AirTags - and in this video I'll show how I did it. I won't share firmware dumps or so, so please don't ask :) Links: - Colin on Twitter: http://twitter.com/colinoflynn - Colin on YouTube: https://www.youtube.com/channel/UCqc9... - Colin's company: https://www.newae.com - LimitedResults Appprotect bypass: https://limitedresults.com/2020/06/nr... - LimitedResults Pocketglitcher: https://limitedresults.com/2021/03/th... My links: - Twitter: https://twitter.com/ghidraninja - Patreon: https://patreon.com/stacksmashing - Pico Debug'n'Dump board: https://gum.co/picodnd Timestamps: 00:00 Intro 00:10 AirTags hardware 01:40 Debugging interface 02:35 Fault-Injection 04:30 Glitching the AirTags 05:50 Hardware Setup 07:10 Lets Glitch 07:56 Firmware modification}
}

@misc{rothPicoDebugDump,
  title = {Pico {{Debug}}'n'{{Dump}}},
  author = {Roth, Thomas},
  journal = {Pico Debug'n'Dump},
  howpublished = {https://pdnd.stacksmashing.net/},
  langid = {english},
  file = {/home/jonty/Zotero/storage/ETXCJ2ZI/pdnd.stacksmashing.net.html}
}

@misc{rudmanCC2541BlinkPin,
  title = {{{CC2541 Blink Pin Code}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/tree/master/cc2541/applications/blink\_state},
  langid = {english},
  file = {/home/jonty/Zotero/storage/2IKMBRIM/blink_state.html}
}

@misc{rudmanCC2541ColdBoot,
  title = {{{CC2541 Cold Boot Glitch GIAnT Script}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/blob/master/cc2541/giant/example\_cc2541\_coldboot.py},
  langid = {english},
  file = {/home/jonty/Zotero/storage/WRPD8MWM/example_cc2541_coldboot.html}
}

@misc{rudmanCC2541CommandTriggeredGlitch,
  title = {{{CC2541 Command-Triggered Glitch GIAnT Script}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/blob/master/cc2541/giant/example\_cc2541.py},
  langid = {english}
}

@misc{rudmanCC2541MinimumGlitch,
  title = {{{CC2541 Minimum Glitch Width Helper Script}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/blob/master/cc2541/giant/cc2541\_min\_glitch\_width.py},
  langid = {english},
  file = {/home/jonty/Zotero/storage/QAG52XSS/cc2541_min_glitch_width.html}
}

@misc{rudmanNRF52832BlinkPin,
  title = {{{nRF52832 Blink Pin Code}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814},
  langid = {english},
  file = {/home/jonty/Zotero/storage/IDR8D2IB/blink_pin.html}
}

@misc{rudmanNRF52832FullGIAnT,
  title = {{{nRF52832 Full GIAnT Script}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/blob/master/nrf52832/giant/example\_nrf52832.py},
  langid = {english},
  file = {/home/jonty/Zotero/storage/GR4QEJPA/example_nrf52832.html}
}

@misc{rudmanNRF52832MinimumGlitch,
  title = {{{nRF52832 Minimum Glitch Width Helper Script}}},
  author = {Rudman, Jonathan},
  journal = {GitLab},
  abstract = {GitLab Community Edition},
  howpublished = {https://git-teaching.cs.bham.ac.uk/mod-ug-proj-2021/jxr814/-/blob/master/nrf52832/giant/nrf52832\_min\_glitch\_width.py},
  langid = {english},
  file = {/home/jonty/Zotero/storage/VNJJK7M6/nrf52832_min_glitch_width.html}
}

@article{UM10360LPC176x5x2016,
  title = {{{UM10360 LPC176x}}/5x {{User}} Manual},
  year = {2016},
  volume = {2016},
  pages = {851},
  langid = {english},
  file = {/home/jonty/Zotero/storage/6L4WTZVI/2016 - UM10360 LPC176x5x User manual.pdf}
}

@misc{USBFPGAModule04,
  title = {{{USB-FPGA Module}} 2.04: {{Spartan}} 6 {{FPGA Board}} with {{EZ-USB FX2}} and {{DDR SDRAM}}.},
  howpublished = {https://www.ztex.de/usb-fpga-2/usb-fpga-2.04.e.html},
  file = {/home/jonty/Zotero/storage/5ZX4IJAH/usb-fpga-2.04.e.html}
}

@article{vandenherrewegenFillYourBoots2020,
  title = {Fill Your {{Boots}}: {{Enhanced Embedded Bootloader Exploits}} via {{Fault Injection}} and {{Binary Analysis}}},
  shorttitle = {Fill Your {{Boots}}},
  author = {{Van den Herrewegen}, Jan and Oswald, David and Garcia, Flavio D. and Temeiza, Qais},
  year = {2020},
  month = dec,
  journal = {IACR Transactions on Cryptographic Hardware and Embedded Systems},
  pages = {56--81},
  issn = {2569-2925},
  doi = {10.46586/tches.v2021.i1.56-81},
  abstract = {The bootloader of an embedded microcontroller is responsible for guarding the device's internal (flash) memory, enforcing read/write protection mechanisms. Fault injection techniques such as voltage or clock glitching have been proven successful in bypassing such protection for specific microcontrollers, but this often requires expensive equipment and/or exhaustive search of the fault parameters. When multiple glitches are required (e.g., when countermeasures are in place) this search becomes of exponential complexity and thus infeasible. Another challenge which makes embedded bootloaders notoriously hard to analyse is their lack of debugging capabilities.},
  langid = {english},
  file = {/home/jonty/Zotero/storage/7ZKSQE4U/Van den Herrewegen et al. - 2020 - Fill your Boots Enhanced Embedded Bootloader Expl.pdf}
}

@article{woutersSusceptibilityTexasInstruments,
  title = {On the Susceptibility of {{Texas Instruments SimpleLink}} Platform Microcontrollers to Non-Invasive Physical Attacks{$\star$}},
  author = {Wouters, Lennert and Gierlichs, Benedikt and Preneel, Bart},
  pages = {23},
  abstract = {We investigate the susceptibility of the Texas Instruments SimpleLink platform microcontrollers to non-invasive physical attacks. We extracted the ROM bootloader of these microcontrollers and then analysed it using static analysis augmented with information obtained through emulation. We demonstrate a voltage fault injection attack targeting the ROM bootloader that allows to enable debug access on a previously locked microcontroller within seconds. Information provided by Texas Instruments reveals that one of our voltage fault injection attacks abuses functionality that is left over from the integrated circuit manufacturing process. The demonstrated physical attack allows an adversary to extract the firmware (i.e. intellectual property) and to bypass secure boot. Additionally, we mount side-channel attacks and differential fault analysis attacks on the hardware AES co-processor. To demonstrate the practical applicability of these attacks we extract the firmware from a Tesla Model 3 key fob.},
  langid = {english},
  file = {/home/jonty/Zotero/storage/QYZX8CQ8/Wouters et al. - On the susceptibility of Texas Instruments SimpleL.pdf}
}

@incollection{woutersSusceptibilityTexasInstruments2022,
  title = {On the {{Susceptibility}} of {{Texas Instruments SimpleLink Platform Microcontrollers}} to {{Non-invasive Physical Attacks}}},
  booktitle = {Constructive {{Side-Channel Analysis}} and {{Secure Design}}},
  author = {Wouters, Lennert and Gierlichs, Benedikt and Preneel, Bart},
  editor = {Balasch, Josep and O'Flynn, Colin},
  year = {2022},
  volume = {13211},
  pages = {143--163},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-99766-3_7},
  abstract = {We investigate the susceptibility of the Texas Instruments SimpleLink platform microcontrollers to non-invasive physical attacks. We extracted the ROM bootloader of these microcontrollers and then analysed it using static analysis augmented with information obtained through emulation. We demonstrate a voltage fault injection attack targeting the ROM bootloader that allows to enable debug access on a previously locked microcontroller within seconds. Information provided by Texas Instruments reveals that one of our voltage fault injection attacks abuses functionality that is left over from the integrated circuit manufacturing process. The demonstrated physical attack allows an adversary to extract the firmware (i.e. intellectual property) and to bypass secure boot. Additionally, we mount side-channel attacks and differential fault analysis attacks on the hardware AES co-processor. To demonstrate the practical applicability of these attacks we extract the firmware from a Tesla Model 3 key fob.},
  isbn = {978-3-030-99765-6 978-3-030-99766-3},
  langid = {english},
  file = {/home/jonty/Zotero/storage/47W4D34X/Wouters et al. - 2022 - On the Susceptibility of Texas Instruments SimpleL.pdf}
}


